{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","text","author","color","this","getQuote","getColor","e","fetch","then","response","json","setState","content","body","headers","method","result","join","className","style","backgroundColor","id","class","href","onClick","handleClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gQAGqBA,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,OAAQ,GACRC,MAAO,UALQ,E,gEAUjBC,KAAKC,WACLD,KAAKE,a,kCAGKC,GACVH,KAAKC,WACLD,KAAKE,a,iCAGK,IAAD,OACTE,MAAM,kCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,EAAKE,SAAS,CACZX,KAAMS,EAASG,QACfX,OAAQQ,EAASR,c,iCAKb,IAAD,OACTM,MAAM,2BAA4B,CAChCM,KAAM,sBACNC,QAAS,CACP,eAAgB,qCAElBC,OAAQ,SAEPP,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,IAAIP,EAAQ,CAAC,OAAQO,EAASO,OAAO,GAAGC,KAAK,KAAM,KAAKA,KAAK,IAC7D,EAAKN,SAAS,CACZT,e,+BAKE,IAAD,OACP,OACE,yBACEgB,UAAU,kBACVC,MAAO,CAAEC,gBAAiBjB,KAAKJ,MAAMG,QAErC,yBAAKmB,GAAG,aACN,uBAAGC,MAAM,mBAAmBH,MAAO,CAAEjB,MAAOC,KAAKJ,MAAMG,SACvD,uBAAGmB,GAAG,QAAQlB,KAAKJ,MAAMC,MACzB,uBAAGsB,MAAM,oBAAoBH,MAAO,CAAEjB,MAAOC,KAAKJ,MAAMG,SACxD,6BACA,uBAAGmB,GAAG,UAAN,IAAiBlB,KAAKJ,MAAME,QAC5B,6BACA,yBAAKqB,MAAM,WACT,uBACEC,KAAK,kCACLL,UAAU,MACVC,MAAO,CAAEC,gBAAiBjB,KAAKJ,MAAMG,OACrCmB,GAAG,eAEH,uBAAGC,MAAM,oBAEX,4BACEJ,UAAU,MACVC,MAAO,CAAEC,gBAAiBjB,KAAKJ,MAAMG,OACrCmB,GAAG,YACHG,QAAS,SAAClB,GAAD,OAAO,EAAKmB,YAAYnB,KAJnC,oB,GAtEqBoB,IAAMC,YCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9503c746.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      author: '',\n      color: 'salmon',\n    };\n  }\n\n  componentDidMount() {\n    this.getQuote();\n    this.getColor();\n  }\n\n  handleClick(e) {\n    this.getQuote();\n    this.getColor();\n  }\n\n  getQuote() {\n    fetch('https://api.quotable.io/random')\n      .then((response) => response.json())\n      .then((response) => {\n        this.setState({\n          text: response.content,\n          author: response.author,\n        });\n      });\n  }\n\n  getColor() {\n    fetch('http://colormind.io/api/', {\n      body: '{\"model\":\"default\"}',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      method: 'POST',\n    })\n      .then((response) => response.json())\n      .then((response) => {\n        let color = ['rgb(', response.result[0].join(','), ')'].join('');\n        this.setState({\n          color,\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div\n        className=\"quote-container\"\n        style={{ backgroundColor: this.state.color }}\n      >\n        <div id=\"quote-box\">\n          <i class=\"fa fa-quote-left\" style={{ color: this.state.color }}></i>\n          <p id=\"text\">{this.state.text}</p>\n          <i class=\"fa fa-quote-right\" style={{ color: this.state.color }}></i>\n          <br />\n          <p id=\"author\">~{this.state.author}</p>\n          <hr />\n          <div class=\"buttons\">\n            <a\n              href=\"http://twitter.com/intent/tweet\"\n              className=\"btn\"\n              style={{ backgroundColor: this.state.color }}\n              id=\"tweet-quote\"\n            >\n              <i class=\"fab fa-twitter\"></i>\n            </a>\n            <button\n              className=\"btn\"\n              style={{ backgroundColor: this.state.color }}\n              id=\"new-quote\"\n              onClick={(e) => this.handleClick(e)}\n            >\n              New Quote\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}